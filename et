[1mdiff --git a/inc/simularium/simulation_cache.h b/inc/simularium/simulation_cache.h[m
[1mindex 1793c668..db3a8f17 100644[m
[1m--- a/inc/simularium/simulation_cache.h[m
[1m+++ b/inc/simularium/simulation_cache.h[m
[36m@@ -126,17 +126,10 @@[m [mnamespace simularium {[m
         //  outdated cache-files will need to be manually removed from S3[m
         std::string GetLocalFilePath(std::string identifier);[m
         std::string GetLocalInfoFilePath(std::string identifier);[m
[31m-        std::string GetAwsFilePath(std::string identifier);[m
[31m-        std::string GetAwsInfoFilePath(std::string identifier);[m
[31m-[m
[31m-      inline void CreateCacheFolder() {[m
[31m-	std::string cmd = "mkdir -p " + this->kCacheFolder;[m
[31m-	int ignore = system(cmd.c_str());[m
[31m-      }[m
[31m-      inline void DeleteCacheFolder() {[m
[31m-	std::string cmd = "rm -rf " + this->kCacheFolder;[m
[31m-	int ignore = system(cmd.c_str());[m
[31m-      }[m
[32m+[m[32m        std::string GetS3TrajectoryPath(std::string identifier);[m
[32m+[m[32m        std::string GetS3TrajectoryCachePath(std::string identifier);[m
[32m+[m[32m        std::string GetS3InfoPath(std::string identifier);[m
[32m+[m[32m        std::string GetS3InfoCachePath(std::string identifer);[m
 [m
         fileio::SimulariumBinaryFile* GetBinaryFile(std::string identifier);[m
 [m
[36m@@ -144,9 +137,6 @@[m [mnamespace simularium {[m
         void ParseFileProperties(Json::Value& jsonRoot, std::string identifier);[m
         bool IsFilePropertiesValid(std::string identifier);[m
 [m
[31m-        const std::string kCacheFolder = "/tmp/aics/simularium/";[m
[31m-        const std::string kAwsPrefix = "trajectory/";[m
[31m-[m
         std::unordered_map<std::string, TrajectoryFileProperties> m_fileProps;[m
         std::unordered_map<std::string, std::vector<std::string>> m_tmpFiles;[m
         std::unordered_map<std::string, std::shared_ptr<fileio::SimulariumBinaryFile>> m_binaryFiles;[m
[1mdiff --git a/src/agentsim_server.cpp b/src/agentsim_server.cpp[m
[1mindex da652c8d..4b8e7a19 100644[m
[1m--- a/src/agentsim_server.cpp[m
[1m+++ b/src/agentsim_server.cpp[m
[36m@@ -30,6 +30,7 @@[m [mint main(int argc, char* argv[])[m
         setenv("TLS_PASSWORD","test", false);[m
         setenv("TLS_CERT_PATH","localhost.pem", false);[m
         setenv("TLS_KEY_PATH","localhost-key.pem", false);[m
[32m+[m	[32msetenv("APP_ENVIRONMENT","development",false);[m
     }[m
 [m
     ConnectionManager connectionManager;[m
[1mdiff --git a/src/main/CMakeLists.txt b/src/main/CMakeLists.txt[m
[1mindex 4aa68bed..4e00e7fc 100644[m
[1m--- a/src/main/CMakeLists.txt[m
[1m+++ b/src/main/CMakeLists.txt[m
[36m@@ -13,6 +13,7 @@[m [mset(SOURCES[m
 "simulation.cpp"[m
 "connection_manager.cpp"[m
 "cli_client.cpp"[m
[32m+[m[32m"config.cpp"[m
 "simularium_binary_file.cpp"[m
 "simularium_file_reader.cpp"[m
 )[m
[1mdiff --git a/src/main/simulation_cache.cpp b/src/main/simulation_cache.cpp[m
[1mindex 1fb6b626..6b16dcfb 100644[m
[1m--- a/src/main/simulation_cache.cpp[m
[1m+++ b/src/main/simulation_cache.cpp[m
[36m@@ -1,6 +1,7 @@[m
 #include "simularium/simulation_cache.h"[m
 #include "simularium/aws/aws_util.h"[m
 #include "simularium/fileio/simularium_file_reader.h"[m
[32m+[m[32m#include "simularium/config/config.h"[m
 #include "loguru/loguru.hpp"[m
 #include <json/json.h>[m
 #include <algorithm>[m
[36m@@ -26,15 +27,24 @@[m [minline bool FileExists(const std::string& name)[m
 namespace aics {[m
 namespace simularium {[m
 [m
[32m+[m[32m    inline void CreateCacheFolder() {[m
[32m+[m	[32mstd::string cmd = "mkdir -p " + config::GetCacheFolder();[m
[32m+[m	[32mint ignore = system(cmd.c_str());[m
[32m+[m[32m    }[m
[32m+[m[32m    inline void DeleteCacheFolder() {[m
[32m+[m	[32mstd::string cmd = "rm -rf " + config::GetCacheFolder();[m
[32m+[m	[32mint ignore = system(cmd.c_str());[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
     SimulationCache::SimulationCache()[m
     {[m
[31m-        this->DeleteCacheFolder();[m
[31m-        this->CreateCacheFolder();[m
[32m+[m[32m        DeleteCacheFolder();[m
[32m+[m[32m        CreateCacheFolder();[m
     }[m
 [m
     SimulationCache::~SimulationCache()[m
     {[m
[31m-        this->DeleteCacheFolder();[m
[32m+[m[32m        DeleteCacheFolder();[m
     }[m
 [m
     void SimulationCache::AddFrame(std::string identifier, TrajectoryFrame frame)[m
[36m@@ -387,29 +397,49 @@[m [mnamespace simularium {[m
     }[m
 [m
     std::string SimulationCache::GetLocalRawTrajectoryFilePath(std::string identifier) {[m
[31m-      return this->kCacheFolder + identifier;[m
[32m+[m[32m      return config::GetCacheFolder() + identifier;[m
     }[m
 [m
     std::string SimulationCache::GetAwsFilePath(std::string identifier)[m
     {[m
[31m-      return this->kAwsPrefix + identifier;[m
[32m+[m[32m      return config::GetS3Location() + identifier;[m
     }[m
 [m
     std::string SimulationCache::GetAwsInfoFilePath(std::string identifier)[m
     {[m
[31m-      return this->kAwsPrefix + identifier + "_info";[m
[32m+[m[32m      return config::GetS3Location() + identifier + "_info";[m
     }[m
 [m
     std::string SimulationCache::GetLocalFilePath(std::string identifier)[m
     {[m
[31m-        return this->kCacheFolder + identifier + ".bin";[m
[32m+[m[32m        return config::GetCacheFolder() + identifier + ".bin";[m
     }[m
 [m
     std::string SimulationCache::GetLocalInfoFilePath(std::string identifier)[m
     {[m
[31m-        return this->kCacheFolder + identifier + ".json";[m
[32m+[m[32m        return config::GetCacheFolder() + identifier + ".json";[m
     }[m
 [m
[32m+[m[32m    std::string SimulationCache::GetS3TrajectoryPath(std::string identifier)[m
[32m+[m[32m    {[m
[32m+[m[32m        return config::GetS3Location() + identifier;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    std::string SimulationCache::GetS3TrajectoryCachePath(std::string identifier)[m
[32m+[m[32m    {[m
[32m+[m[32m        return config::GetS3CacheLocation() + identifier;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    std::string SimulationCache::GetS3InfoPath(std::string indentifier)[m
[32m+[m[32m    {[m
[32m+[m[32m        return config::GetS3Location() + identifier + "_info";[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    std::string SimulationCache::GetS3InfoCachePath(std::string identifier)[m
[32m+[m[32m    {[m
[32m+[m[32m        return config::GetS3CacheLocation() + identifier "_info";[m
[32m+[m[32m    }[m
[32m+[m[41m  [m
     fileio::SimulariumBinaryFile* SimulationCache::GetBinaryFile(std::string identifier) {[m
       std::string path = this->GetLocalFilePath(identifier);[m
 [m
